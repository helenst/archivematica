syntax = "proto3";

package mcpserverpb;

/**
 * Service
 */

service MCPServer {

  // ApproveJob proceeds processing with a choice given by the user
  rpc ApproveJob(ApproveJobRequest) returns (ApproveJobResponse);

  // ApproveTransfer starts a transfer awaiting for approval
  rpc ApproveTransfer(ApproveTransferRequest) returns (ApproveTransferResponse);

  // JobList returns jobs awaiting for approval
  rpc JobList(JobListRequest) returns (JobListResponse);

  // LinkGet gets detailed chain link information
  rpc LinkGet(LinkGetRequest) returns (LinkGetResponse);

  // ChainGet gets detailed chain information
  rpc ChainGet(ChainGetRequest) returns (ChainGetResponse);

  // TEMPORARY! Used in the Dashboard but it should be done differently in the future.
  // The Dashboard should stop generating the configuration files.
  // Related: https://github.com/artefactual/archivematica/pull/493
  rpc ListMicroserviceChoiceDuplicates(ListMicroserviceChoiceDuplicatesRequest) returns (ListMicroserviceChoiceDuplicatesResponse);

}

//
// Request/Response message types
//

// rpc ApproveTransfer

message ApproveTransferRequest {
  string id = 1;
}

message ApproveTransferResponse {
  bool approved = 1;
}

// rpc ApproveJob

message ApproveJobRequest {
  string id = 1;
  string choiceId = 2;
}

message ApproveJobResponse {
  bool approved = 1;
}

// rpc ListJobsAwaitingApproval

message JobListRequest {}

message JobListResponse {
  message Job {
    message Choice {
      string value = 1;
      string description = 2;
    }
    enum UnitType {
      UNKNOWN = 0;
      TRANSFER = 1;
      INGEST = 2;
      DIP = 3;
    }
    string id = 1;
    UnitType unitType = 2;
    repeated Choice choices = 3;
  }
  repeated Job jobs = 1;
  int32 transferCount = 2;
  int32 ingestCount = 3;
}

// rpc LinkGet

message LinkGetRequest {
  string id = 1;
}

message LinkGetResponse {
  Link link = 1;
}

// rpc ChainGet

message ChainGetRequest {
  string id = 1;
}

message ChainGetResponse {
  Chain chain = 1;
}

// rpc ListMicroserviceChoiceDuplicates

message ListMicroserviceChoiceDuplicatesRequest {
  string linkName = 1;
  string choiceName = 2;
}

message ListMicroserviceChoiceDuplicatesResponse {
  message Duplicate {
    string srcId = 1;
    string dstId = 2;
  }
  repeated Duplicate duplicates = 1;
}

//
// Other message types
//

message Job {
  enum Status {
    UNKNOWN = 0;
    AWAITING_DECISION = 1;
    COMPLETED_SUCCESSFULLY = 2;
    EXECUTING_COMMANDS = 3;
    FAILED = 4;
  }
}

message ExitCode {
  int32 code = 1;
  Job.Status status = 2;
  string linkId = 3;
}

message LinkConfig {
  message StandardTasksConfig { // For links of type = 1, 2, 5, 6
    string execute = 1;
    string arguments = 2;
    string filterSubDir = 3;
    string filterFileStart = 4;
    string filterFileEnd = 5;
    bool requiresLock = 6;
    string stdoutFile = 7;
    string stderrFile = 8;
  }
  message MicroServiceChainChoice { // For links of type = 3
    message Choice {
      string chainId = 1;
      string description = 2;
    }
    repeated Choice choices = 1;
  }
  message MicroServiceChoiceReplacementDic { // For links of type = 4
    message Dict {
      string id = 1;
      string description = 2;
      map<string, string> items = 3;
    }
    repeated Dict dicts = 2;
  }
  message TaskConfigUnitVariableLinkPull { // For links of type = 5
    string variable = 1;
    string linkId = 2;
  }
  message TaskConfigSetUnitVariable { // For links of type = 7
    string variable = 1;
    string value = 2;
    string linkId = 3;
  }
  StandardTasksConfig stc = 1;
  MicroServiceChainChoice mscc = 2;
  MicroServiceChoiceReplacementDic mscrd = 3;
  TaskConfigUnitVariableLinkPull tcuvlp = 4;
  TaskConfigSetUnitVariable tcsuv = 5;
}

message Link {
  enum LinkType {
    UNKNOWN = 0;
    RUN_ONCE = 1;                   // description="one instance"
    RUN_FOR_EACH_FILE = 2;          // description="for each file"
    GET_USER_CHOICE_CHAIN = 3;      // description="get user choice to proceed with"
    GET_USER_CHOICE_DICT = 4;       // description="get replacement dic from user choice"
    GENERATE_USER_CHOICE = 5;       // description="Get microservice generated list in stdOut"
    GET_GENERATED_USER_CHOICE = 6;  // description="Get user choice from microservice generated list"
    GET_UNIT_VARIABLE = 7;          // description="linkTaskManagerUnitVariableLinkPull"
    SET_UNIT_VARIABLE = 8;          // description="linkTaskManagerSetUnitVariable"
    GET_MAGIC_LINK = 9;             // description="goto magic link" (DEPRECATED)
    SET_MAGIC_LINK = 10;            // description="assign magic link" (DEPRECATED)
  }
  string id = 1;
  LinkType type = 2;
  LinkConfig config = 3;
  string group = 4;
  string description = 5;
  string defaultLinkId = 6;
  Job.Status defaultStatus = 7;
  repeated ExitCode exitCodes = 8;
}

message Chain {
  string id = 1;
  string description = 2;
  string linkId = 3;
}
